
CIS 551: Computer and Network Security
Homework II Part II
Group Members:	Ashutosh Goel
		Bolei Fu
		Rohit Dureja

---

Repository Contents

The repository consists of four files which are

1. Makefile : automates the process of compiling and generating output
2. packetparse.c : source file which reads packet data dump and parses itd
3. smtp.pcap : packet dump files generated using tcpdump
4. datalist.c : source file which analyzes the tcp flow

--- 
How to run?

The source repository consists of a makefile which can be used to automate the process of compling and generating output. The makefile offers the following commands

make all
	compiles packetparse.c with the -lpcap condition

make parse
	run packetparse and analyze the TCP flow in the smtp.pcap dumpfile

make clean
	cleans the object code, generated txt files containing the parsed data and the files containing the TCP flow data

---

Procedural Information

The pcap library is used to gather packet data. Instead of sniffing a live network socket, the pcap library is used to read from an offline dump file created using libpcap. The pcap_loop() reads one packet at a time and calls the packet handler.

The handler we used this time is based on the one we used in the previous part, which catches the TCP packet and ignore the rest. 
Once a TCP packet arrives, it checks the connection status, analyzes the packet and filters out duplicate. Then, all output files are generated.

The TCP packets are sent to the add_to_connection_list() method which operates on a linked list data structure and has fields corresponding to the data inside a packet. The direction of the packet is determined by a quick comparison of the ip on the initiator (which is determined from the ip_src of the first packet in the connection) with the ip_src and ip_dst of packets.

The data structure offers a method to check for already active connections. It compares the ip_src, ip_dst, sport and dport of the incoming packet with the contents of the already active connection. If they match, the packets data is appended to the existing connection, otherwise a new connection is added to the list.

To check for duplicates, the sequence number of the packets from both the initiator and the responder are tracked and updated in the connection list. If a packet comes with a sequence number which is less than the sequence number in the connection list, the packets is tagged duplicate the its payload data is not written to the files.

---

References

Code for sniffing packets has been derived from www.tcpdump.org/sniffex.c

Code for calculating the checksum has been dervied from several sources :
	1. http://minirighi.sourceforge.net/html/tcp_8c-source.html
	2. http://www.bloof.de/tcp_checksumming
	3. http://www.thegeekstuff.com/2012/05/ip-header-checksum/

---
